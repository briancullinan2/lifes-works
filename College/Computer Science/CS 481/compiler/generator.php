<?php

require_once 'visitor.php';

require_once 'parser.php';

require_once 'printer.php';

class Generator extends Visitor
{
	var $loop_counter = 0; // used for assigning a number to each loop
	
	var $code = ''; // code generated by visiting each node
	
	function Generator($tree)
	{
		$this->tree = $tree;
	}

	function generate()
	{
		$this->visit($this->tree);
		
		return $this->code;
	}
	
	function visitAlways($tree)
	{
		if(isset($tree->label))
		{
			$this->code .= $tree->label . ':' . "\r\n";
		}
		if(isset($tree->insertCode))
		{
			$this->code .= $tree->insertCode;
		}
		if(isset($tree->insertTo) || isset($tree->insertToAfter))
		{
			// save code length so we can find the changes later
			$tree->codeLength = strlen($this->code);
		}
	}
	
	function leaveAlways($tree)
	{
		if(isset($tree->insertTo))
		{
			// take the difference between what it was when the node was visited 
			// and what it is now and insert that difference in the insertTo spot
			if(!isset($tree->insertTo->insertCode)) $tree->insertTo->insertCode = '';
			$tree->insertTo->insertCode .= substr($this->code, $tree->codeLength, strlen($this->code) - $tree->codeLength);
			$this->code = substr($this->code, 0, $tree->codeLength);
		}
		if(isset($tree->insertToAfter))
		{
			if(!isset($tree->insertToAfter->insertCodeAfter)) $tree->insertToAfter->insertCodeAfter = '';
			$tree->insertToAfter->insertCodeAfter .= substr($this->code, $tree->codeLength, strlen($this->code) - $tree->codeLength);
			$this->code = substr($this->code, 0, $tree->codeLength);
		}
		if(isset($tree->insertCodeAfter))
		{
			$this->code .= $tree->insertCodeAfter;
		}
	}

	function visitExpression($tree)
	{
		if(!isset($tree->tree['Operator']))
		{
			if(isset($tree->tree['Literal']->tree['BinaryLiteral'])) $this->code .= 'push ' . $tree->tree['Literal']->tree['BinaryLiteral'] . "\r\n";
			if(isset($tree->tree['Literal']->tree['IntLiteral'])) $this->code .= 'push ' . $tree->tree['Literal']->tree['IntLiteral'] . "\r\n";
			if(isset($tree->tree['Literal']->tree['RealLiteral'])) $this->code .= 'push ' . $tree->tree['Literal']->tree['RealLiteral'] . "\r\n";
			if(isset($tree->tree['Literal']->tree['HexLiteral'])) $this->code .= 'push ' . $tree->tree['Literal']->tree['HexLiteral'] . "\r\n";
			//if(isset($tree->tree['Literal']->tree['StringLiteral'])) $this->code .= 'push ' . $tree->tree['Literal']->tree['StringLiteral'];
			
			if(isset($tree->tree['VariableName'])) $this->code .= 'gload ' . $tree->tree['VariableName']->info->index . "\r\n";

		}
		elseif(!isset($tree->tree['VariableName']))
		{
			if(isset($tree->tree['Literal']->tree['BinaryLiteral'])) $this->code .= 'push ' . $tree->tree['Literal']->tree['BinaryLiteral'] . "\r\n";
			if(isset($tree->tree['Literal']->tree['IntLiteral'])) $this->code .= 'push ' . $tree->tree['Literal']->tree['IntLiteral'] . "\r\n";
			if(isset($tree->tree['Literal']->tree['RealLiteral'])) $this->code .= 'push ' . $tree->tree['Literal']->tree['RealLiteral'] . "\r\n";
			if(isset($tree->tree['Literal']->tree['HexLiteral'])) $this->code .= 'push ' . $tree->tree['Literal']->tree['HexLiteral'] . "\r\n";
		}
		else
		{
			$this->code .= 'gload ' . $tree->tree['VariableName']->info->index . "\r\n";
		}
	}
	
	function leaveExpression($tree)
	{
		if(isset($tree->tree['Operator']))
		{
			if($tree->tree['Operator'] == '+') $this->code .= 'add' . "\r\n";
		}
	}
	
	function leaveAssignment($tree)
	{
		$this->code .= 'gsave ' . $tree->tree['Assignment']['VariableName']->info->index . "\r\n";
	}
	
	function visitForLoop($tree)
	{
		$tree->tree['Expression']->label = 'loop' . $this->loop_counter;
		$tree->tree['Counter']->insertCode = 'jgt end' . $tree->tree['Expression']->label . "\r\n";
		$tree->tree['Counter']->insertToAfter = $tree->tree['CommandList'];
	}
	
	function leaveForLoop($tree)
	{
		$this->code .= 'jump ' . $tree->tree['Expression']->label . "\r\n";
		$this->loop_counter++;
		$this->code .= 'end' . $tree->tree['Expression']->label . ':' . "\r\n";
	}
	
	function visitParamCall($tree)
	{
	}
	
	function leaveFunctionCall($tree)
	{
		$this->code .= 'call ' . $tree->info->name . "\r\n";
	}
	
	function visitFunctionDef($tree)
	{
		$this->code .= 'jump end' . $tree->tree['F-Name']->tree['Identifier'] . "\r\n" . $tree->tree['F-Name']->tree['Identifier'] . ':' . "\r\n";
	}
	
	function leaveFunctionDef($tree)
	{
		$this->code .= 'return' . "\r\n" . 'end' . $tree->tree['F-Name']->tree['Identifier'] . ':' . "\r\n";
	}
	
	function visitParamDef($tree)
	{
		$this->code .= 'pop ' . 0xFFFFFFFF . "\r\n";
		
		foreach($tree->tree['Params'] as $i => $param)
		{
			$this->code .= 'gsave ' . $param->info->index . "\r\n";
		}
		$this->code .= 'gload ' . 0xFFFFFFFF . "\r\n";
	}
	
	function leaveKeyword($tree)
	{
		if($tree->tree['Keyword'] == 'p')
		{
			$this->code .= 'print' . "\r\n";
		}
		elseif($tree->tree['Keyword'] == 'pc')
		{
			$this->code .= 'printc' . "\r\n";
		}
	}
	
	function leaveProgram($tree)
	{
		$this->code .= 'return' . "\r\n";
	}
	
}

?>